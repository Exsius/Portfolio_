// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
)

const addMessage = `-- name: AddMessage :execresult
INSERT INTO messages (username, body) VALUES (?, ?)
`

type AddMessageParams struct {
	Username string `json:"username"`
	Body     string `json:"body"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addMessage, arg.Username, arg.Body)
}

const getMessage = `-- name: GetMessage :one
SELECT id, username, body, createdat FROM messages WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Body,
		&i.Createdat,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :one
SELECT id, username, body, createdat FROM messages ORDER BY createdAt DESC LIMIT ?
`

func (q *Queries) GetMessages(ctx context.Context, limit int32) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessages, limit)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Body,
		&i.Createdat,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
